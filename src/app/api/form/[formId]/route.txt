import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import PocketBase from 'pocketbase';
import { render } from '@react-email/render';
import FormSubmission from '../../../../emailTemplates/dev/FormSubmission';

// Email transporter configuration
const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 587,
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// Initialize PocketBase
const pb = new PocketBase('http://127.0.0.1:8090');

export async function POST(request: Request, { params }: { params: { formId: string } }) {
  try {
    const { formId } = params;
    const data = await request.json();

    // Fetch form details from PocketBase
    const form = await pb.collection('forms').getFirstListItem(`form_id="${formId}"`);
    if (!form) {
      return NextResponse.json({ error: 'Form not found' }, { status: 404 });
    }

    // Render the email template
    const emailHtml = render(<FormSubmission formName={form.name} emailTo={form.email_to} data={data} />);

    const mailOptions = {
      from: process.env.SMTP_USER,
      to: form.email_to,
      subject: `New Submission for ${form.name}`,
      html: emailHtml,
    };

    // Send email
    await transporter.sendMail(mailOptions);

    // Log submission in PocketBase
    await pb.collection('submission_logs').create({
      form_id: form.id,
      data,
      sent_at: new Date().toISOString(),
    });

    return NextResponse.json({ message: 'Submission processed and email sent' }, { status: 200 });
  } catch (error) {
    console.error('Error processing submission:', error);
    return NextResponse.json({ error: 'Failed to process submission' }, { status: 500 });
  }
}